//堆排序
PriorityQueue<ListNode> queue = new PriorityQueue(new Comparator<ListNode>() {
			public int compare(ListNode o1, ListNode o2) {
				return (o1.val - o2.val);//构建的小顶堆
                return (o2.val-o1.val);//构建的大顶堆
			}
		});

PriorityQueue<ListNode> queue=new PriorityQueue(new Comparator<ListNode>(){
	public int compare(ListNode o1,ListNode o2){
		return o1.val-o2.val;//小顶堆
		return o2.val-o1.val;//大顶堆
	}
});
//二叉堆
/**
 *“上浮”调整
 *array 待调整的堆
 */
public static void upAdjust(int[] array){
	int childIndex=array.length-1;
	int parentIndex=(childIndex-1)/2;
	//temp保存插入的叶子结点值，用于最后的赋值
	int temp=array[childIndex];
	while(childIndex>0&&temp<array[parentIndex]){
		array[childIndex]=array[parentIndex];
		childIndex=parentIndex;
		parentIndex=(parentIndex-1)/2;
	}
	array[childIndex]=temp;
}
/**
 *"下沉调整"
 *array 待调整的堆
 *parentIndex 要“下沉”的父节点
 *length 堆的有效大小
*/
public static void downAdjust
10. 正则表达式匹配
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false

class Solution {
    public boolean isMatch(String s, String p) {
        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
        dp[0][0] = true;
        if(p.length() != 0)   dp[0][1] = false;
        int i = 0, j = 0;
        //初始化dp数组行
        for(i = 1; i < p.length(); i++){
            if(p.charAt(i) == '*')  dp[0][i + 1] = dp[0][i - 1];
            else    dp[0][i + 1] = false;
        }
        //初始化dp数组列
        for(i = 0; i < s.length(); i++){
            dp[i + 1][0] = false;
        }
        //开始dp
        for(i = 0; i < s.length(); i++){
            for(j = 0; j < p.length(); j++){
                if(p.charAt(j) == '.')  dp[i + 1][j + 1] = dp[i][j];
                else if(p.charAt(j) == '*'){
                    if(p.charAt(j - 1) == '.') dp[i + 1][j + 1] = dp[i][j + 1] || dp[i + 1][j - 1];
                    else{
                        if(s.charAt(i) != p.charAt(j - 1))  dp[i + 1][j + 1] = dp[i + 1][j - 1];
                        else    dp[i + 1][j + 1] = dp[i][j + 1] || dp[i + 1][j - 1];
                    }
                }
                else{
                    if(p.charAt(j) == s.charAt(i))  dp[i + 1][j + 1] = dp[i][j];
                    else    dp[i + 1][j + 1] = false;
                }
            }
        }    
        return dp[s.length()][p.length()];
    }
}

